name: Build cpsign prediction services

on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'v*.*.*'
    tags:
      - 'v*.*.*'
    paths:
      - '**'
  pull_request:
    branches:
      - 'master'
      - 'develop'
      - 'v*.*.*'
    paths:
      - '**'

permissions:
  contents: read
  packages: write

jobs:

  build-images:
    strategy:
      matrix:
        server-name: ['cpsign-cp-clf-server', 'cpsign-cp-reg-server', 'cpsign-vap-clf-server']

    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      DOCKER_FILE: 'Dockerfile'
      working-directory: .

    steps:
    - uses: actions/checkout@v4

    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Docker meta
      id: meta_predictionservice
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ghcr.io/arosbio/${{ matrix.server-name }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ env.working-directory }}
        platforms: linux/amd64,linux/arm64
        file: ${{ env.DOCKER_FILE }}
        # Match the target in the multi-stage Dockerfile
        target: ${{ matrix.server-name }}
        #,linux/arm/v8
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_predictionservice.outputs.tags }}
        labels: ${{ steps.meta_predictionservice.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max