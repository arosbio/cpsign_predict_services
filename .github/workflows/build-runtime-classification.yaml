name: Build cpsign predict service for classification

on:
  workflow_dispatch:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'v*.*.*'
    tags:
      - 'v*.*.*'
    paths:
      - '**'
  pull_request:
    branches:
      - 'main'
      - 'develop'
      - 'v*.*.*'
    paths:
      - '**'

permissions:
  contents: read
  packages: write

jobs:

  build-model-runtimes:

    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: 'classification'
      #DOCKER_USER: ${{ secrets.DOCKER_USER }}
      #DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      DOCKER_FILE: 'Dockerfile.classification'
      working-directory: .
      WAR_VERSION: '2.0.0-SNAPSHOT'

    steps:
    - uses: actions/checkout@v2

    # https://github.com/docker/setup-qemu-action
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    # https://github.com/docker/setup-buildx-action
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    #- name: docker login
    #  run: |
    #    docker login ${{ env.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.GH_TOKEN }}

    - name: Login to GHCR
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}
        #username: ${{ github.actor }}
        #password: ${{ secrets.GH_TOKEN }}

    - name: Docker meta
      id: meta_predictionservice
      uses: docker/metadata-action@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ghcr.io/arosbio/classification
        # generate Docker tags based on the following events/attributes
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{env.working-directory}}
        platforms: linux/amd64,linux/arm64
        file: ${{env.DOCKER_FILE}}
        #,linux/arm/v8
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_predictionservice.outputs.tags }}
        labels: ${{ steps.meta_predictionservice.outputs.labels }}
        build-args: |
          BASE=ghcr.io/arosbio/predictionservice:latest
          WAR_FILE=cp_classification-${{ env.WAR_VERSION }}.war
        cache-from: type=gha
        cache-to: type=gha,mode=max